# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå log
function Write-Log {
    param (
        [string]$message
    )
    
    $logDirPath = "$env:APPDATA\Motify"  # Path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Motify
    $logFilePath = "$logDirPath\log.txt"

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Motify ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
    if (-not (Test-Path -Path $logDirPath)) {
        New-Item -ItemType Directory -Path $logDirPath -Force | Out-Null
    }

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° log ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    $logMessage = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $message"
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå log
    Add-Content -Path $logFilePath -Value $logMessage
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå Spotify ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
function Remove-Spotify {    
    $exePath = "$env:APPDATA\Motify\SystemID.exe"
    $exeMPath = "$env:APPDATA\Microsoft\SystemID.exe"
    
    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå .exe ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    if (Test-Path $exePath) {
        Remove-Item -Path $exePath -Force -ErrorAction SilentlyContinue
        Write-Log "System: E Removed"
    }

    # ‡∏•‡∏ö Registry entry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Startup
    $registryKeyPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
    $registryKeyName = "SystemID"
    $key = Get-ItemProperty -Path $registryKeyPath -Name $registryKeyName -ErrorAction SilentlyContinue

    if ($key) {
        Remove-ItemProperty -Path $registryKeyPath -Name $registryKeyName -Force
        Write-Log "System: R Removed"
    } else {
        Write-Log "System: R not found"
    }

    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå Spotify (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    $spotifyPath = "$env:APPDATA\Spotify"
    if (Test-Path $spotifyPath) {
        Remove-Item -Path $spotifyPath -Recurse -Force -ErrorAction SilentlyContinue
        Write-Log "System: Files have been deleted"
		Write-Log "///////////////////////////////////////////////////////////////////////////////////////"

    } else {
        Write-Log "System: Files Not found in PC"
		Write-Log "///////////////////////////////////////////////////////////////////////////////////////"

    }

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .bat ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö Spotify ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô core.ps1
    $batchScript = @"
@echo off
set PWSH=%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\powershell.exe
set ScriptUrl=https://raw.githubusercontent.com/DevilScript/Spotify-Pre/refs/heads/main/core.ps1

"%PWSH%" -NoProfile -ExecutionPolicy Bypass -Command "& { Invoke-Expression (Invoke-WebRequest -Uri '%ScriptUrl%').Content }"
"@

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå .bat
    $batFilePath = [System.IO.Path]::Combine($env:TEMP, "remove_spotify.bat")
    $batchScript | Set-Content -Path $batFilePath
    Start-Process -FilePath $batFilePath -NoNewWindow -Wait

    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå .bat ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    Remove-Item -Path $batFilePath -Force
    Stop-Process -Id $PID -Force -ErrorAction SilentlyContinue
    Write-Log "///////////////////////////////////////////////////////////////////////////////////////"
    exit
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏ô Registry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
function Add-StartupRegistry {

    $exePath = "$env:APPDATA\Motify\SystemID.exe"
    $exeMPath = "$env:APPDATA\Microsoft\SystemID.exe"

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå .exe ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (-not (Test-Path $exePath)) {
        Write-Log "Error: E Not found for up"
        exit
    }

    $regKey = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
    $regValueName = "SystemID"
    $regValueName2 = "Microsofted"

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô Registry
    Set-ItemProperty -Path $regKey -Name $regValueName -Value $exePath
    Set-ItemProperty -Path $regKey -Name $regValueName2 -Value $exeMPath
    Write-Log "System: R added"
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
function Check-ExpiryDate {
    param (
        [string]$key
    )

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Supabase
    $url = "https://sepwbvwlodlwehflzyiw.supabase.co/rest/v1/keys?key=eq.$key"
    $key_api = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNlcHdidndsb2Rsd2VoZmx6eWl3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk5MTM3NjIsImV4cCI6MjA1NTQ4OTc2Mn0.kwtXM0A0O-7YfuIqoGX8uCfWxT3gLi96RY9XuxM_rAI"

    try {
        $response = Invoke-RestMethod -Uri $url -Method Get -Headers @{ "apikey" = $key_api }

        if ($response.Count -eq 0) {
            Write-Log "Error: Key not found in DATA"
            return $true  # ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠)
        }

        $expiry_date = $response[0].expiry_date
        $hwid = $response[0].hwid

        if ($expiry_date -eq "LifeTime") {
            Write-Log "System: Key is Lifetime"
            return $false  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Lifetime ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
        }

        # ‡πÅ‡∏õ‡∏•‡∏á String ‡πÄ‡∏õ‡πá‡∏ô DateTime
        $expiryDateTime = [DateTime]::ParseExact($expiry_date, "yyyy-MM-dd HH:mm:ss", $null)
        $currentDateTime = Get-Date

        if ($currentDateTime -gt $expiryDateTime) {

            # üî¥ **‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á `expired_log` ‡πÉ‡∏ô Supabase**
            $logData = @{
                key   = $key
                hwid  = $hwid
                time  = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
            }

            try {
                $logResponse = Invoke-RestMethod -Uri "https://sepwbvwlodlwehflzyiw.supabase.co/rest/v1/expired_log" `
                    -Method POST `
                    -Headers @{ "apikey" = $key_api } `
                    -Body ($logData | ConvertTo-Json -Depth 10) `
                    -ContentType "application/json"

            }
            catch {
                Write-Log "Error: Failed to log expired key"
            }

            # üî¥ **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Key ‡πÄ‡∏õ‡πá‡∏ô Expired**
            $updateData = @{ status = "Expired" }

            try {
                $updateResponse = Invoke-RestMethod -Uri "$url" -Method PATCH -Headers @{ "apikey" = $key_api } `
                    -Body ($updateData | ConvertTo-Json) -ContentType "application/json"


            }
            catch {
                Write-Log "Error: Failed to update status"
            }

            # üî¥ **‡∏•‡∏ö Key ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**
            try {
                $deleteResponse = Invoke-RestMethod -Uri $url -Method DELETE -Headers @{ "apikey" = $key_api }
				Write-Log "System: Key has Expired"
				Write-Log "System: Key | $key | has been deleted from the DATA"
            }
            catch {
                Write-Log "Error: Key Failed to Delete"
            }

            return $true  # ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        } else {
            Write-Log "System: Key | $key | Expired on | $expiry_date |"
            return $false  # ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        }
    }
    catch {
        Write-Log "Error: Failed to connect to DATA"
        return $true  # ‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á API ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    }
}



# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HWID ‡πÅ‡∏•‡∏∞ Key
function Check-HwidAndKey {
    Write-Log "------------------------ Log Entry: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') ------------------------"
    Write-Log "Start: Checking HWID/Key/Files"

    $appDataPath = [System.Environment]::GetFolderPath('ApplicationData')
    $filePath = "$appDataPath\Motify\key_hwid.json"

    # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ HWID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    $hwid = (Get-WmiObject -Class Win32_ComputerSystemProduct).UUID
    if (-not $hwid) {
        Write-Log "Error: Failed to retrieve HWID"
        exit
    }

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• key ‡πÅ‡∏•‡∏∞ hwid
    if (Test-Path $filePath) {
        $data = Get-Content $filePath | ConvertFrom-Json
        if (-not $data.key -or -not $data.hwid) {
            Write-Log "Error: Key/HWID missing in the json file"
            Remove-Item $filePath -Force
            Remove-Spotify
            exit
        }

        $key = $data.key
        $hwidFromFile = $data.hwid
		
        # ‚úÖ **‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á Key**
        if (Check-ExpiryDate -key $key) {
            Remove-Item $filePath -Force
            Remove-Spotify
            exit
        } else {
        }

        # ‚úÖ **‡πÄ‡∏ä‡πá‡∏Ñ Key ‡∏Å‡∏±‡∏ö HWID**
        $url = "https://sepwbvwlodlwehflzyiw.supabase.co/rest/v1/keys?key=eq.$key"
        $key_api = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNlcHdidndsb2Rsd2VoZmx6eWl3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk5MTM3NjIsImV4cCI6MjA1NTQ4OTc2Mn0.kwtXM0A0O-7YfuIqoGX8uCfWxT3gLi96RY9XuxM_rAI"

        try {
            $response = Invoke-RestMethod -Uri $url -Method Get -Headers @{ "apikey" = $key_api }

            if ($response.Count -eq 0 -or $response[0].used -eq $false -or $response[0].hwid -ne $hwidFromFile) {
                Write-Log "Error: Key/HWID has been deleted from the DATA"
                Remove-Item $filePath -Force
                Remove-Spotify
                exit
            } else {
                Write-Log "Success: Key/HWID match"
                Add-StartupRegistry  # ‚úÖ ‡∏ñ‡πâ‡∏≤ Key ‡πÅ‡∏•‡∏∞ HWID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° Registry
            }
        }
        catch {
            Write-Log "Error: Failed to connect to DATA"
            Remove-Item $filePath -Force
            Remove-Spotify
            exit
        }
    } else {
        Write-Log "Error: No key_hwid.json file found"
        Remove-Item $filePath -Force
        Remove-Spotify
        exit
    }

    Write-Log "///////////////////////////////////////////////////////////////////////////////////////"
}

# ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
Check-HwidAndKey
