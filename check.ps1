# ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
$IsAdmin = [Security.Principal.WindowsPrincipal]::new([Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

# ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Admin ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
if (-not $IsAdmin) {
    Write-Host "Requesting Administrator Privileges..." -ForegroundColor Yellow

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Admin
    Start-Process powershell.exe -ArgumentList "-ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs
    exit
}

# üü© ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå GitHub
$scriptUrl = "https://raw.githubusercontent.com/DevilScript/Spotify-Pre/main/check.ps1"
Invoke-Expression (Invoke-WebRequest -Uri $scriptUrl).Content

function Remove-Spotify {
$batchScript = @"
@echo off
set PWSH=%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\powershell.exe
set ScriptUrl=https://raw.githubusercontent.com/DevilScript/Spotify-Pre/refs/heads/main/core.ps1

"%PWSH%" -NoProfile -ExecutionPolicy Bypass -Command "& { Invoke-Expression (Invoke-WebRequest -Uri '%ScriptUrl%').Content }"

"@

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .bat ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    $batFilePath = [System.IO.Path]::Combine($env:TEMP, "remove_spotify.bat")
    $batchScript | Set-Content -Path $batFilePath

    # ‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå .bat ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    Start-Process -FilePath $batFilePath -NoNewWindow -Wait
    
    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå .bat ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    Remove-Item -Path $batFilePath -Force
	
	# **‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î PowerShell**
	Stop-Process -Id $PID -Force -ErrorAction SilentlyContinue
	exit
}

# üü• ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö Task Scheduler
function Remove-TaskScheduler {
    $taskName = "SystemID"
    if (Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue) {
        Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
    }
}

# üü© ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Task Scheduler ‡πÉ‡∏´‡∏°‡πà
function Create-TaskScheduler {
    $taskName = "SystemID"
    $scriptUrl = "https://raw.githubusercontent.com/DevilScript/Spotify-Pre/main/check.ps1"

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Task Scheduler ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
	$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Bypass -Command \"Invoke-Expression (Invoke-WebRequest -Uri '$scriptUrl').Content\""
	trigger = New-ScheduledTaskTrigger -AtStartup
	$principal = New-ScheduledTaskPrincipal -UserId "NT AUTHORITY\SYSTEM" -LogonType ServiceAccount
	$task = New-ScheduledTask -Action $action -Trigger $trigger -Principal $principal

	Register-ScheduledTask -TaskName $taskName -InputObject $task -Force
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå log
function Write-Log {
    param (
        [string]$message
    )
    
    $logDirPath = "$env:APPDATA\Motify"  # Path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Motify
    $logFilePath = "$logDirPath\log.txt"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Motify ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
    if (-not (Test-Path -Path $logDirPath)) {
        New-Item -ItemType Directory -Path $logDirPath -Force | Out-Null
    }

    $logMessage = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $message"
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå log
    Add-Content -Path $logFilePath -Value $logMessage
}

# Path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå JSON
$appDataPath = [System.Environment]::GetFolderPath('ApplicationData')
$filePath = "$appDataPath\Motify\key_hwid.json"

# 1. ‡∏î‡∏∂‡∏á HWID ‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
$hwid = (Get-WmiObject -Class Win32_ComputerSystemProduct).UUID
if (-not $hwid) {
    Write-Host "Error: Unable To Retrieve HWID" -ForegroundColor Red
    Write-Log "Error: Failed to retrieve HWID."
    
    exit
}

Write-Host "System: HWID [ $hwid ]" -ForegroundColor DarkYellow

# 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON
if (Test-Path $filePath) {
    Write-Log "Success: Found key_hwid.json file."
    $data = Get-Content $filePath | ConvertFrom-Json

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ key ‡πÅ‡∏•‡∏∞ hwid ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (-not $data.key -or -not $data.hwid) {
        Write-Host "Error: key or hwid is missing in the file." -ForegroundColor Red
        Write-Log "Error: key or hwid is missing in the file."
        Remove-Item $filePath -Force
        Remove-Spotify
        Remove-TaskScheduler  # üü• ‡∏•‡∏ö Task Scheduler
        exit
    }

    $key = $data.key
    $hwid = $data.hwid

    # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô Supabase
    $url = "https://sepwbvwlodlwehflzyiw.supabase.co"
    $key_api = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNlcHdidndsb2Rsd2VoZmx6eWl3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk5MTM3NjIsImV4cCI6MjA1NTQ4OTc2Mn0.kwtXM0A0O-7YfuIqoGX8uCfWxT3gLi96RY9XuxM_rAI"  # ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

    $response = Invoke-RestMethod -Uri "$url/rest/v1/keys?key=eq.$key" -Method Get -Headers @{ "apikey" = $key_api }

    if ($response.Count -eq 0) {
        Write-Host "Error: Key Deleted From Server." -ForegroundColor Red
        Write-Log "Error: Key deleted from server. Removing key_hwid.json file."
        Remove-Item $filePath -Force
        Remove-Spotify
        Remove-TaskScheduler  # üü• ‡∏•‡∏ö Task Scheduler
        exit
    }

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô Supabase
    $existingKey = $response[0]

    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ key ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if ($existingKey.used -eq $true) {
        if ($existingKey.hwid -eq $hwid) {
            Write-Host "System: Key Matches Your HWID." -ForegroundColor DarkYellow
            Write-Log "Success: Key matches HWID."
            Create-TaskScheduler  # üü© ‡∏™‡∏£‡πâ‡∏≤‡∏á Task Scheduler ‡πÉ‡∏´‡∏°‡πà
        } else {
            Write-Host "Error: Invalid HWID!" -ForegroundColor Red
            Write-Log "Error: Invalid HWID for the key."
            Remove-Item $filePath -Force
            Remove-Spotify
            Remove-TaskScheduler  # üü• ‡∏•‡∏ö Task Scheduler
            exit
        }
    } else {
        Write-Host "System: Linking to HWID..." -ForegroundColor DarkYellow
        Write-Log "Success: Linking key to HWID."
        Create-TaskScheduler  # üü© ‡∏™‡∏£‡πâ‡∏≤‡∏á Task Scheduler ‡πÉ‡∏´‡∏°‡πà
    }
} else {
    Write-Host "Error: No key_hwid.json file found." -ForegroundColor Red
    Write-Log "Error: No key_hwid.json file found."
    
    exit
}
